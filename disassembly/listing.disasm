Disassembly Listing for 946
Generated From:
/home/prygoon/MPLABXProjects/946.X/dist/HT_PIC16F946/debug/946.X.debug.elf
28.06.2018 13:03:28

---  /home/prygoon/MPLABXProjects/946.X/user.c  ---------------------------------------------------------
1:             /******************************************************************************/
2:             /* Files to Include                                                           */
3:             /******************************************************************************/
4:             
5:             #if defined(__XC)
6:             #include <xc.h>         /* XC8 General Include File */
7:             #elif defined(HI_TECH_C)
8:             #include <htc.h>        /* HiTech General Include File */
9:             #endif
10:            
11:            #include <stdint.h>         /* For uint8_t definition */
12:            #include <stdbool.h>        /* For true/false definition */
13:            
14:            #include "user.h"
15:            #include "system.h"
16:            
17:            /******************************************************************************/
18:            /* User Functions                                                             */
19:            /******************************************************************************/
20:            
21:            /* <Initialize variables in user.h and insert code for user algorithms.> */
22:            
23:            void InitApp(void) {
24:                /* TODO Initialize User Ports/Peripherals/Project here 
25:                
26:                кнопки
27:                RE5 - lock
28:                RE6 - unlock
29:                RE7 - ch2
30:                RE2 - F 
31:                Включаются еденицей на  RB7
32:                
33:                 */
34:            
35:                TRISE |= 0xE4; //Turn RE2,RE5,RE6,RE7 as input (11100100))
0056  30E4     MOVLW 0xE4
0057  00F4     MOVWF butcount
0058  0874     MOVF butcount, W
0059  1683     BSF STATUS, 0x5
005A  1303     BCF STATUS, 0x6
005B  0489     IORWF PORTE, F
36:                TRISB &= ~0x80; // set RB7 as output
005C  307F     MOVLW 0x7F
005D  00F4     MOVWF butcount
005E  0874     MOVF butcount, W
005F  0586     ANDWF PORTB, F
37:                PORTB |= 0x80;
0060  1283     BCF STATUS, 0x5
0061  1303     BCF STATUS, 0x6
0062  1786     BSF PORTB, 0x7
38:                TRISF &= ~0x01; //Turn RF0 as output(посдсветка))
0063  30FE     MOVLW 0xFE
0064  00F4     MOVWF butcount
0065  0874     MOVF butcount, W
0066  1683     BSF STATUS, 0x5
0067  1703     BSF STATUS, 0x6
0068  0585     ANDWF PORTA, F
39:                PORTF &= ~0x01; //Set low level on RF0 pin
0069  30FE     MOVLW 0xFE
006A  00F4     MOVWF butcount
006B  0874     MOVF butcount, W
006C  0588     ANDWF PORTD, F
40:                /* Setup analog functionality and port direction */
41:            
42:                /* Initialize peripherals */
43:            
44:                /* Enable interrupts */
45:            }
006D  0008     RETURN
46:            
47:            /*Обработка дребезга*/
48:            bool CheckButton(void) {
49:                unsigned char result = 0;
0025  01F6     CLRF result
50:                unsigned int butcount = 0;
0026  01F4     CLRF butcount
0027  01F5     CLRF 0x75
51:            
52:                while (RE2) {
53:                    if (butcount < 1000) {
002C  3003     MOVLW 0x3
002D  0275     SUBWF 0x75, W
002E  30E8     MOVLW 0xE8
002F  1903     BTFSC STATUS, 0x2
0030  0274     SUBWF butcount, W
0031  1803     BTFSC STATUS, 0x0
0032  283A     GOTO 0x3A
54:                        butcount++;
0033  3001     MOVLW 0x1
0034  07F4     ADDWF butcount, F
0035  1803     BTFSC STATUS, 0x0
0036  0AF5     INCF 0x75, F
0037  3000     MOVLW 0x0
0038  07F5     ADDWF 0x75, F
55:                    } else {
0039  2828     GOTO 0x28
56:                        result = 1;
003A  01F6     CLRF result
003B  0AF6     INCF result, F
57:                        break;
58:                    }
59:                }
0028  1283     BCF STATUS, 0x5
0029  1303     BCF STATUS, 0x6
002A  1D09     BTFSS PORTE, 0x2
002B  283C     GOTO 0x3C
60:            
61:                return result;
003C  0876     MOVF result, W
003D  0008     RETURN
62:            }
63:            
64:            /**/
65:            void ConfigureSignal() {
66:                unsigned int highBitTime = 5;
67:                unsigned int lowBitTime = 2;
68:                unsigned int delay = 3;
69:            
70:                bool signal[12] = {1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1};
71:            
72:                for (int i = 0; i < 12; i++) {
73:                    PORTAbits.RA0 = 1;
74:                    if (signal[i] == 1) {
75:                        __delay_ms(highBitTime);
76:                    } else {
77:                        __delay_ms(lowBitTime);
78:                    }
79:                    PORTAbits.RA0 = 0;
80:                    __delay_ms(delay);
81:                }
82:            }
83:            
84:            void StartLED() {
85:                LCDEN = 1;
86:                SLPEN = 0;
87:                VLCDEN = 1;
88:                CS1 = 0;
89:                CS0 = 0;
90:                LMUX0 = 1;
91:                LMUX1 = 1;
92:                WFT = 1;
93:                BIASMD = 0;
94:                LP3 = 0;
95:                LP2 = 0;
96:                LP1 = 0;
97:                LP0 = 0;
98:                SE2 = 1;
99:                SE3 = 1;
100:               SE4 = 1;
101:               SE5 = 1;
102:               SE6 = 1;
103:               SE7 = 1;
104:               SE8 = 1;
105:               SE9 = 1;
106:               SE11 = 1;
107:               SE15 = 1;
108:               SE16 = 1;
109:               SE17 = 1;
110:               SE18 = 1;
111:               SE19 = 1;
112:               SE20 = 1;
113:               SE21 = 1;
114:               SE22 = 1;
115:               SE28 = 1;
116:               SE29 = 1;
117:               SE30 = 1;
118:               SE31 = 1;
119:               SE34 = 1;
120:               SE35 = 1;
121:               SE36 = 1;
122:               SE37 = 1;
123:           }
124:           
125:           void Light() {
126:           
127:               PORTFbits.RF0 = 1;
006E  1683     BSF STATUS, 0x5
006F  1703     BSF STATUS, 0x6
0070  1408     BSF PORTD, 0x0
128:               __delay_ms(2000);
0071  300B     MOVLW 0xB
0072  00F6     MOVWF result
0073  3026     MOVLW 0x26
0074  00F5     MOVWF 0x75
0075  305D     MOVLW 0x5D
0076  00F4     MOVWF butcount
0077  0BF4     DECFSZ butcount, F
0078  2877     GOTO 0x77
0079  0BF5     DECFSZ 0x75, F
007A  2877     GOTO 0x77
007B  0BF6     DECFSZ result, F
007C  2877     GOTO 0x77
007D  287E     GOTO 0x7E
129:               PORTFbits.RF0 = 0;
007E  1683     BSF STATUS, 0x5
007F  1703     BSF STATUS, 0x6
0080  1008     BCF PORTD, 0x0
130:           
131:           }
0081  0008     RETURN
---  /home/prygoon/MPLABXProjects/946.X/system.c  -------------------------------------------------------
1:             /******************************************************************************/
2:             /*Files to Include                                                            */
3:             /******************************************************************************/
4:             
5:             #if defined(__XC)
6:                 #include <xc.h>         /* XC8 General Include File */
7:             #elif defined(HI_TECH_C)
8:                 #include <htc.h>        /* HiTech General Include File */
9:             #endif
10:            
11:            #include <stdint.h>        /* For uint8_t definition */
12:            #include <stdbool.h>       /* For true/false definition */
13:            
14:            #include "system.h"
15:            
16:            /* Refer to the device datasheet for information about available
17:            oscillator configurations. */
18:            void ConfigureOscillator(void)
19:            {
20:                /* TODO Add clock switching code if appropriate.  */
21:            
22:                /* Typical actions in this function are to tweak the oscillator tuning
23:                register, select new clock sources, and to wait until new clock sources
24:                are stable before resuming execution of the main project. */
25:            }
00AA  0008     RETURN
---  /home/prygoon/MPLABXProjects/946.X/main.c  ---------------------------------------------------------
1:             /******************************************************************************/
2:             /* Files to Include                                                           */
3:             /******************************************************************************/
4:             
5:             #if defined(__XC)
6:             #include <xc.h>         /* XC8 General Include File */
7:             #elif defined(HI_TECH_C)
8:             #include <htc.h>        /* HiTech General Include File */
9:             #endif
10:            
11:            #include <stdint.h>        /* For uint8_t definition */
12:            #include <stdbool.h>       /* For true/false definition */
13:            
14:            #include "system.h"        /* System funct/params, like osc/peripheral config */
15:            #include "user.h"          /* User funct/params, such as InitApp */
16:            
17:            /******************************************************************************/
18:            /* User Global Variable Declaration                                           */
19:            /******************************************************************************/
20:            
21:            /* i.e. uint8_t <variable_name>; */
22:            
23:            /******************************************************************************/
24:            /* Main Program                                                               */
25:            
26:            /******************************************************************************/
27:            void main(void) {
28:                /* Configure the oscillator for the device */
29:                ConfigureOscillator();
003E  120A     BCF PCLATH, 0x4
003F  118A     BCF PCLATH, 0x3
0040  20AA     CALL 0xAA
0041  120A     BCF PCLATH, 0x4
0042  118A     BCF PCLATH, 0x3
30:            
31:                /* Initialize I/O and Peripherals for application */
32:                InitApp();
0043  120A     BCF PCLATH, 0x4
0044  118A     BCF PCLATH, 0x3
0045  2056     CALL 0x56
0046  120A     BCF PCLATH, 0x4
0047  118A     BCF PCLATH, 0x3
33:            
34:                while (1) {
0055  2848     GOTO 0x48
35:                    if (CheckButton()) {
0048  120A     BCF PCLATH, 0x4
0049  118A     BCF PCLATH, 0x3
004A  2025     CALL 0x25
004B  120A     BCF PCLATH, 0x4
004C  118A     BCF PCLATH, 0x3
004D  3A00     XORLW 0x0
004E  1903     BTFSC STATUS, 0x2
004F  2848     GOTO 0x48
36:                        Light();
0050  120A     BCF PCLATH, 0x4
0051  118A     BCF PCLATH, 0x3
0052  206E     CALL 0x6E
0053  120A     BCF PCLATH, 0x4
0054  118A     BCF PCLATH, 0x3
0055  2848     GOTO 0x48
37:                    }
38:                    /* TODO <INSERT USER APPLICATION CODE HERE> */
39:                }
40:            }
---  /home/prygoon/MPLABXProjects/946.X/interrupts.c  ---------------------------------------------------
1:             /******************************************************************************/
2:             /*Files to Include                                                            */
3:             /******************************************************************************/
4:             
5:             #if defined(__XC)
6:                 #include <xc.h>         /* XC8 General Include File */
7:             #elif defined(HI_TECH_C)
8:                 #include <htc.h>        /* HiTech General Include File */
9:             #endif
10:            
11:            #include <stdint.h>         /* For uint8_t definition */
12:            #include <stdbool.h>        /* For true/false definition */
13:            
14:            /******************************************************************************/
15:            /* Interrupt Routines                                                         */
16:            /******************************************************************************/
17:            
18:            /* Baseline devices don't have interrupts. Note that some PIC16's 
19:             * are baseline devices.  Unfortunately the baseline detection macro is 
20:             * _PIC12 */
21:            #ifndef _PIC12
22:            
23:            void interrupt isr(void)
0004  00FE     MOVWF 0x7E
24:            {
25:                /* This code stub shows general interrupt handling.  Note that these
26:                conditional statements are not handled within 3 seperate if blocks.
27:                Do not use a seperate if block for each interrupt flag to avoid run
28:                time errors. */
29:            
30:            #if 0
31:                
32:                /* TODO Add interrupt routine code here. */
33:            
34:                /* Determine which flag generated the interrupt */
35:                if(<Interrupt Flag 1>)
36:                {
37:                    <Interrupt Flag 1=0>; /* Clear Interrupt Flag 1 */
38:                }
39:                else if (<Interrupt Flag 2>)
40:                {
41:                    <Interrupt Flag 2=0>; /* Clear Interrupt Flag 2 */
42:                }
43:                else
44:                {
45:                    /* Unhandled interrupts */
46:                }
47:            
48:            #endif
49:            
50:            }
009F  0873     MOVF 0x73, W
00A0  00FF     MOVWF 0x7F
00A1  0872     MOVF 0x72, W
00A2  008A     MOVWF PCLATH
00A3  0871     MOVF 0x71, W
00A4  0084     MOVWF FSR
00A5  0E70     SWAPF __pcstackCOMMON, W
00A6  0083     MOVWF STATUS
00A7  0EFE     SWAPF 0x7E, F
00A8  0E7E     SWAPF 0x7E, W
00A9  0009     RETFIE
51:            #endif
52:            
53:            
